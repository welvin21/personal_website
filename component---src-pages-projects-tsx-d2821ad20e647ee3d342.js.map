{"version":3,"sources":["webpack:///./src/pages/projects.tsx"],"names":["projectsQuery","ProjectsPage","data","location","projects","allMdx","edges","map","node","frontmatter","Provider","value","title","project","index","key"],"mappings":"2FAAA,kHA2BaA,EAAgB,aAqBdC,UAxCqB,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACrCC,EAAuBF,EAAKG,OAAOC,MAAMC,KAC7C,qBAAGC,KAAQC,eAGb,OACE,kBAAC,IAAgBC,SAAjB,CAA0BC,MAAOR,GAC/B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKS,MAAM,aACX,kBAAC,IAAD,KACGR,EAASG,KAAI,SAACM,EAAmBC,GAApB,OACZ,kBAAC,IAAD,eAASC,IAAKD,GAAWD","file":"component---src-pages-projects-tsx-d2821ad20e647ee3d342.js","sourcesContent":["import React from 'react';\nimport { Heading, Box } from '@chakra-ui/core';\nimport { graphql } from 'gatsby';\n\nimport { Layout, SEO, Project } from '../components';\nimport { LocationContext } from '../context';\nimport { IProject } from '../types';\n\nconst ProjectsPage: React.FC<any> = ({ data, location }) => {\n  const projects: IProject[] = data.allMdx.edges.map(\n    ({ node: { frontmatter: project } }: any) => project as IProject\n  );\n\n  return (\n    <LocationContext.Provider value={location}>\n      <Layout>\n        <SEO title=\"Projects\" />\n        <Box>\n          {projects.map((project: IProject, index) => (\n            <Project key={index} {...project} />\n          ))}\n        </Box>\n      </Layout>\n    </LocationContext.Provider>\n  );\n};\n\nexport const projectsQuery = graphql`\n  query {\n    allMdx(\n      filter: { fileAbsolutePath: { regex: \"/src/projects/\" } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n      limit: 1000\n    ) {\n      edges {\n        node {\n          frontmatter {\n            path\n            title\n            excerpt\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default ProjectsPage;\n"],"sourceRoot":""}