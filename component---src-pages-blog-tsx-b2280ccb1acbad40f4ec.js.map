{"version":3,"sources":["webpack:///./src/pages/blog.tsx"],"names":["BlogPage","data","location","useState","page","setPage","postIndexLowerBound","postIndexUpperBound","edges","allMdx","siteMetadata","site","blogPosts","map","node","frontmatter","Provider","value","title","blogPost","index","key","count","Math","ceil","length","onChange","_"],"mappings":"6FAAA,oEAsEeA,UA7DiB,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAAe,EAC9BC,mBAAiB,GAAlCC,EAD+C,KACzCC,EADyC,KAGhDC,EADgB,GACOF,EAAO,GAC9BG,EAFgB,EAEMH,EAAuB,EAGvCI,EAERP,EAFFQ,OAAUD,MACFE,EACNT,EADFU,KAAQD,aAEJE,EAAyBJ,EAAMK,KACnC,qBAAGC,KAAQC,eAGb,OACE,kBAAC,IAAgBC,SAAjB,CAA0BC,MAAOf,GAC/B,kBAAC,IAAoBc,SAArB,CAA8BC,MAAOP,GACnC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKQ,MAAK,eAAiBd,IAC3B,kBAAC,IAAD,KACGQ,EAAUC,KACT,SAACM,EAAqBC,GAAtB,OACEA,GAASd,GACTc,GAASb,GACP,kBAAC,IAAD,eAAUc,IAAKD,GAAWD,QAIlC,kBAAC,IAAD,CACEG,MAAOC,KAAKC,KAAKZ,EAAUa,OA3Bf,GA4BZrB,KAAMA,EACNsB,SAAU,SAACC,EAAGvB,GAAJ,OAAqBC,EAAQD","file":"component---src-pages-blog-tsx-b2280ccb1acbad40f4ec.js","sourcesContent":["import React, { useState } from 'react';\nimport { Heading, Text, Box } from '@chakra-ui/core';\nimport { graphql } from 'gatsby';\n\nimport { Layout, SEO, BlogPost, Pagination } from '../components';\nimport { LocationContext, SiteMetadataContext } from '../context';\nimport { siteMetadataFragment, mdxFragment } from '../graphql';\nimport { IBlogPost } from '../types';\n\nconst BlogPage: React.FC<any> = ({ data, location }) => {\n  const [page, setPage] = useState<number>(1);\n  const POST_PER_PAGE = 5;\n  const postIndexLowerBound = (page - 1) * POST_PER_PAGE;\n  const postIndexUpperBound = page * POST_PER_PAGE - 1;\n\n  const {\n    allMdx: { edges },\n    site: { siteMetadata },\n  } = data;\n  const blogPosts: IBlogPost[] = edges.map(\n    ({ node: { frontmatter: blogPost } }: any) => blogPost as IBlogPost\n  );\n\n  return (\n    <LocationContext.Provider value={location}>\n      <SiteMetadataContext.Provider value={siteMetadata}>\n        <Layout>\n          <SEO title={`Blog | Page ${page}`} />\n          <Box>\n            {blogPosts.map(\n              (blogPost: IBlogPost, index) =>\n                index >= postIndexLowerBound &&\n                index <= postIndexUpperBound && (\n                  <BlogPost key={index} {...blogPost} />\n                )\n            )}\n          </Box>\n          <Pagination\n            count={Math.ceil(blogPosts.length / POST_PER_PAGE)}\n            page={page}\n            onChange={(_, page: number) => setPage(page)}\n          />\n        </Layout>\n      </SiteMetadataContext.Provider>\n    </LocationContext.Provider>\n  );\n};\n\nexport const blogPageQuery = graphql`\n  query {\n    allMdx(\n      filter: { fileAbsolutePath: { regex: \"/src/blog-posts/\" } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n      limit: 1000\n    ) {\n      edges {\n        node {\n          ...MdxFragment\n          frontmatter {\n            tags\n          }\n        }\n      }\n    }\n    site {\n      ...SiteMetadata\n    }\n  }\n`;\n\nexport default BlogPage;\n"],"sourceRoot":""}